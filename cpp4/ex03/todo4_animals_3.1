/* ************************************************************************** */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                             ~  ~  ~  ~  ~    ~                             */
/*                              ~    _ ~ _   o>                               */
/*                             ~  \ / \ / \ /  ~                              */
/*                              ~  ~      ~    ~                              */
/*                                                                            */
/*                                                                            */
/*                              Polymorphism 				                  */
/*                              abstract classes                              */
/*                              interfaces                                    */
/*                                                                            */
/*                                                                            */
/* *********************  ʕ • ᴥ•ʔ  mode: todo  (⊙. ⊙ )  ********************* */



-----------------------8<------ [ Requirements ] ------------------------------






-----------------------8<------ [ above :: ex03 ] ------------------------------
-----------------------8<------ [ below :: ex02 ] ------------------------------


Creating Animal objects doesn’t make sense after all. It’s true, they make no sound!

{{ ? }}


The default Animal class should not be instantiable.
	- Fix the Animal class so nobody can instantiate it. 
	- Everything should work as before.

	- If you want to, you can update the class name by adding a A prefix to Animal.



-----------------------8<------ [ above :: ex02 ] ------------------------------
-----------------------8<------ [ below :: ex01 ] ------------------------------



- Implement a Brain class. 

- Brain contains an array of 100 std::string called ideas.
	- Dog and Cat will have a private Brain* attribute.
	- Dog and Cat will create their Brain using new Brain();

- Upon destruction, Dog and Cat delete all of their Brains.

- In your main function, create and fill an array of Animal objects. 
	- Half of it will be Dog objects 
	- the other half will be Cat objects
	- At the end of your program execution
		- loop over this array and delete every Animal
		- You must delete directly dogs and cats as Animals

The appropriate destructors must be called in the expected order.

Don’t forget to check for memory leaks.

A copy of a Dog or a Cat mustn’t be shallow. 

Thus, you have to test that your copies are deep copies!


-----------------------8<------ [ above :: ex01 ] ------------------------------
-----------------------8<------ [ below :: ex00 ] ------------------------------


ex00	--->	Polymorphism


- Tests / main
	- provide most complete tests possible


- Display all Canon messages
	- need all constr/destr messages
	- different msg for different mem func


- Start by implementing a simple base class called Animal. 
It has one protected
	- attribute:
		• std::string type;

- Dog - Implement a Dog class that inherits from Animal.
- Cat - Implement a Cat class that inherits from Animal.



-----------------------8<------ [ Goal ] ----------c--------------------



- These two derived classes must set their type field depending on their name. 
	
	- Dog’s type will be initialized to "Dog"
	- Cat’s type will be initialized to "Cat".

- * 
	The type of the Animal class can be left empty or set to the value of your choice. 
		*

- Every animal must be able to use the member function:
	
	- makeSound()
	- It will print an appropriate sound (cats don’t bark).


- Lastly, implement a WrongCat class that inherits from a WrongAnimal class. 

- If you replace the Animal and the Cat by the wrong ones

	in the code above, the WrongCat should output the WrongAnimal sound.





