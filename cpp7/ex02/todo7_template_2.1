```sc
/* ************************************************************************** */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                             ~  ~  ~  ~  ~    ~                             */
/*                              ~    _ ~ _   o>                               */
/*                             ~  \ / \ / \ /  ~                              */
/*                              ~  ~      ~    ~                              */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                                 Template                                   */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/* *********************  ʕ • ᴥ•ʔ  mode: todo  (⊙. ⊙ )  ********************* */
```

`/* ***************************  [ 2. Array ]  *************************** */`


( TO SORT OUT )


Develop a class template Array that contains elements of type T and that implements
the following behavior and functions:
• Construction with no parameter: Creates an empty array.
• Construction with an unsigned int n as a parameter: Creates an array of n elements
initialized by default.
Tip: Try to compile int * a = new int(); then display *a.
• Construction by copy and assignment operator. In both cases, modifying either the
original array or its copy after copying musn’t affect the other array.
• You MUST use the operator new[] to allocate memory. Preventive allocation (allocating memory in advance) is forbidden. Your program must never access nonallocated memory.
• Elements can be accessed through the subscript operator: [ ].
• When accessing an element with the [ ] operator, if its index is out of bounds, an
std::exception is thrown.
• A member function size() that returns the number of elements in the array. This
member function takes no parameter and musn’t modify the current instance.
As usual, ensure everything works as expected and turn in a main.cpp file that contains your tests.



`/* ***************************  [ 1. Iter ]  *************************** */`


- Implement a function template iter (for_each)
	
	- takes 3 parameters and returns nothing.

		• 1st parameter is the address of an array.
		• 2nd one is the length of the array.
		• 3rd one is a function to be called on every elem

	- Your iter function template must work with any type of array.
	
	***	The third parameter
	***	can be an instantiated function template.




`/* ***************************  [ 0. (Intro) ]  *************************** */`

- Implement the following function templates:
	
	• swap
	Swaps the values of two given arguments. Does not return anything.
	
	• min:
		- Compares the two values passed in
		- returns the smaller one
		- returns the 2nd one if the two of them are equal

	• max: 
		- Compares the two values passed in
		- returns the greater one
		- returns the 2nd one if the two them are equal

	** These functions can be called with any type of argument. 
	
	*** The only requirement is
		- the two arguments must have the same type
		- must support all the comparison operators.
