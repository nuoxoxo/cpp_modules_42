- ex00 $\color {Dandelion} \text { ZOMBIE } $ 
- :: 3 types of entities: 
  - <kbd>stack zombie</kbd> dies outside of scope
  - <kbd>heap zombie</kbd> must be manually deleted 
  - <kbd>void zombie</kbd> exists within its function scope, dies at once
- ex01 $\color {Dandelion} \text { HORDE } $ 
- :: similar to the Phonebook 
  - <kbd>Horde</kbd> is not a Class, but an object-array
  - do <kbd>delete []</kbd> to free an array of objects
  - the subject hints at a _for_each_ function
  - run program with 2 args
- ex02 $\color {Dandelion} \text { REFERENCE } $ 
- :: print addresses of <kbd>var string</kbd>, <kbd>reference</kbd> & <kbd>string pointer</kbd>
  - all 3 addresses should be the same 
- ex03 $\color {Dandelion} \text {HUMAN AB} $  
- :: w/ or w/o weapon 
  - <kbd>main( )</kbd> with 2 cases provided, should for both cases print:
  - an attack w/ "crude spiked club"
  - 2nd attack w/ "some other type of club"
  - <kbd>try...catch</kbd> won't work 
- ex04 $\color {Dandelion} \text { SED } $  
- :: <kbd>i/o fstream </kbd>
  - Bug on 2nd submit : needle = `lol` . haystack = `lollol`
  -  $\color {Dandelion} \text { Use\ testsuites\ via\ git\ clone} $
  - __subject did not mention sed__ 
- ex05 . 06 ~Karen~ $\color {Dandelion} \text { Harl\ .\ harlFilter } $
  - using _pointers_ to func
  - print function name using `__FUNCTIION__`
